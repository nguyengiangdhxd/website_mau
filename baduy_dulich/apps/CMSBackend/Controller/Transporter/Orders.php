<?php
namespace CMSBackend\Controller\Transporter;

use CMSBackend\Event\CMSBackendEvent;
use CMSBackend\Library\CMSBackendAuth;
use Flywheel\Factory;
use Flywheel\Session\Session;
use Toxotes\Logger;

class Orders extends Base {
    /** @var \ShippingOrder */
    public $order;

    public function beforeExecute()
    {
        parent::beforeExecute(); // TODO: Change the autogenerated stub
        if (!($oid = $this->get('id'))) {
            $oid = $this->post('id');
        }

        if ($oid) {
            $this->order = \ShippingOrder::retrieveById($oid);
        }
    }

    public function executeDefault()
    {
        if (!$this->isAllowed(PERMISSION_TRANSPORTER_VIEW_ORDER)) {
            return $this->raise403(t('You don\'t have permission access this area!'));
        }

        $phone = $this->get('phone');
        $customer = $this->get('customer');
        $state = $this->get('state');
        $staff = $this->get('staff');
        $page = $this->get('page', 'INT', 1);

        if ($this->request()->isXmlHttpRequest()) {
            //filter by customer
            $query = \ShippingOrder::select();
            if ($customer) {
                if (is_numeric($customer)) {
                    $query->where('`customer_id` = :cus_id')
                        ->setParameter(':cus_id', $customer, \PDO::PARAM_INT);
                } else {
                    $query->where('`customer_id` IN (SELECT `id` FROM customer c WHERE c.name LIKE :cus_name)')
                        ->setParameter(':cus_name', "%{$customer}%", \PDO::PARAM_STR);
                }
            }

            if ($state) {
                $query->andWhere('`state` = :state')
                    ->setParameter(':state', $state ,\PDO::PARAM_STR);
            }

            if ($phone) {
                $query->andWhere('pickup_phone LIKE :phone')
                    ->orWhere('`customer_id` IN (SELECT `id` FROM customer c WHERE c.mobile LIKE :phone OR c.other_mobile LIKE :phone OR c.phone LIKE :phone)')
                    ->setParameter(':phone', "{$phone}%", \PDO::PARAM_STR);
            }

            if ($staff) {
                $query->andWhere('`moderator` = :staff OR `pickup_staff` = :staff')
                    ->setParameter(':staff', $staff, \PDO::PARAM_INT);
            }

            $cq = clone $query;
            $total = $cq->count('`id`')->execute();
            $orders = $query->setMaxResults(30)
                ->setFirstResult(30*($page-1))
                ->execute();

            $result = [];
            /** @var \ShippingOrder[] $orders */
            foreach($orders as $order) {
                $t = $order->toArray();
                $t['detail_link'] = $this->createUrl('transporter/orders/detail', ['id' => $order->getId()]);
                $t['edit_link'] = $this->createUrl('transporter/orders/form', ['id' => $order->getId()]);
                $t['state'] = t(\ShippingOrder::$state_name[$order->getState()]);
                $t['customer'] = [
                    'name' => $order->getCustomer()->getName(),
                    'detail_link' => $this->createUrl('transporter/customer/default', ['id' => $order->getCustomerId()])
                ];
                $t['moderator'] = $order->getModerator();
                if ($t['moderator']) {
                    $t['moderator'] = $this->_hydrateUsers(\Users::retrieveById($order->getModerator()));
                }
                $t['pickup_staff'] = $order->getPickupStaff();
                if ($t['pickup_staff']) {
                    $t['pickup_staff'] = $this->_hydrateUsers(\Users::retrieveById($order->getPickupStaff()));
                }

                $t['pickup'] = [
                    'address' => $order->getPickupAddress(),
                ];

                if ($order->getPickupDistrictId()) {
                    $t['pickup']['district'] = \Location::retrieveById($order->getPickupDistrictId())->getName();
                }

                if ($order->getPickupProvinceId()) {
                    $t['pickup']['province'] = \Location::retrieveById($order->getPickupProvinceId())->getName();
                }

                $result[] = $t;
            }

            $ajax = new \AjaxResponse('OK');
            $ajax->type = \AjaxResponse::SUCCESS;
            $ajax->orders = $result;
            $ajax->current_page = $page;
            $ajax->total_page = ceil($total/30);

            return $this->renderText($ajax->toString());
        }

        $staff_list = \Users::findBySection(\Users::SECTION_STAFF);
        $this->document()->addJsVar('order_list_url', $this->createUrl('transporter/orders'));

        $this->view()->assign([
            'phone' => $phone,
            'customer' => $customer,
            'state' => $state,
            'staff' => $staff,
            'staff_list' => $staff_list,
            'page' => $page
        ]);

        $this->setView('Transporter/Order/default');
        return $this->renderComponent();
    }

    public function executeForm()
    {
        $this->setView('Transporter/Order/form');
        if (!$this->order) {
            $this->order = new \ShippingOrder();
            $customer = new \ShippingCustomer();
        } else {
            $customer = $this->order->getCustomer();
        }

        $moderators = [];
        $transporters = [];

        //load moderator
        $mod_id_cfg = \Setting::get(SETTING_MODERATOR_GROUP_ID);
        $transporter_id_cfg = \Setting::get(SETTING_TRANSPORTER_GROUP_ID);
        if ($mod_id_cfg) {
            $moderatorRole = \Roles::retrieveById($mod_id_cfg);
            if ($moderatorRole) {
                $moderators = $moderatorRole->getMembers();
            }
        }

        if ($transporter_id_cfg) {
            $transporterRole = \Roles::retrieveById($transporter_id_cfg);
            if ($transporterRole) {
                $transporters = $transporterRole->getMembers();
            }
        }

        $error = [];
        if ($this->request()->isPostRequest()) {
            if($this->_save($error)) {
                Session::getInstance()->setFlash('order_form', t('Save success'));
                $this->redirect($this->createUrl('transporter/orders/form', ['id' => $this->order->getId()]));
            }
        }

        $this->document()->addJsVar('customers_list_url', $this->createUrl('transporter/orders/list_customers'));
        $this->view()->assign([
            'error' => $error,
            'message' => Session::getInstance()->getFlash('order_form'),
            'order' => $this->order,
            'customer' => $customer,
            'moderators' => $moderators,
            'transporters' => $transporters
        ]);
        return $this->renderComponent();
    }

    public function executeListCustomers()
    {
        $keyword = $this->get('k');
        Factory::getResponse()->setContentType('application/json');
        $query = \ShippingCustomer::read();
        if ($keyword) {
            $query->where('`uid` LIKE :keyword OR `mobile` LIKE :keyword OR `other_mobile` LIKE :keyword OR `phone` LIKE :keyword')
                ->setParameter(':keyword', "%{$keyword}%", \PDO::PARAM_STR);
        }

        $stm = $query->execute();
        $result = [];
        while($row = $stm->fetchObject(\ShippingCustomer::getPhpName(), [null, false])) {
            /** @var \ShippingCustomer $row */
            $tm = [$row->getMobile()];
            if ($row->getOtherMobile()) {
                $tm[] = $row->getOtherMobile();
            }

            if ($row->getPhone()) {
                $tm[] = $row->getPhone();
            }

            $tokens = $tm;
            $tokens[] = $row->getUid();

            $result[] = [
                'name' => $row->getName(),
                'uid' => $row->getUid(),
                'mobiles' => implode(' ', $tm),
                'address' => $row->getAddress(),
                'province_id' => $row->getProvinceId(),
                'district_id' => $row->getDistrictId(),
                'id' => $row->getId(),
                'tokens' => $tokens
            ];
        }

        return $this->renderText(json_encode($result));
    }

    /**
     * Save order
     *
     * @param array $error
     * @return bool
     */
    private function _save(array &$error) {
        $data = $this->post('order', 'ARRAY', []);
        $data['total_fee'] = floatval(str_replace(',', '.', str_replace('.', '', @$data['total_fee'])));
        $this->order->hydrate($data);

        $is_new = $this->order->isNew();
        if ($is_new) {
            $this->order->setCreatedBy(CMSBackendAuth::getInstance()->getUserId());
        }

        //validate
        if (!$this->order->getCustomer()) {
            $error['customer_id'] = t('Please chose customer');
        }

        if (empty($error)) {
            if ($this->order->save()) {
                $this->dispatch(($is_new)? 'createNewShippingOrder' : 'updateShippingOrder', new CMSBackendEvent($this, [
                    'order' => $this->order
                ]));
                return true;
            } else if (!$this->order->isValid()) {
                foreach ($this->order->getValidationFailures() as $fail) {
                    $error[$fail->getColumn(false)] = t($fail->getMessage());
                }
            }
        }

        return false;
    }

    private function _hydrateUsers(\Users $user) {
        $t = $user->toArray();
        $t['avatar'] = \Toxotes\Util::gravatar($user->getEmail(), '32');
        return $t;
    }

    //region DETAIL

    public function executeDetail()
    {
        if (!$this->isAllowed(PERMISSION_TRANSPORTER_VIEW_ORDER)) {
            return $this->raise403(t('You don not have permission access this area'));
        }

        if (!$this->order) {
            return $this->raise404(t('Order not found!'));
        }

        $data = $this->order->toArray();
        $customer = $this->order->getCustomer();

        //hydrate customer
        $data['customer'] = $customer->toArray();
        $data['customer']['detail_link'] = $this->createUrl('transporter/customer/detail', ['id' => $customer->getId()]);

        $data['staff'] = [];
        //staff
        if ($this->order->getModerator()) {
            $data['staff']['moderator'] = $this->_hydrateUsers(\Users::retrieveById($this->order->getModerator()));
        }

        if ($this->order->getPickupStaff()) {
            $data['staff']['pickup'] = $this->_hydrateUsers(\Users::retrieveById($this->order->getPickupStaff()));
        }

        $shipping_data = [];
        $shipping = (array) \DomesticsShipping::findByOrderId($this->order->getId());
        if (!$this->order->isClosed()) {
            $shipping[] = new \DomesticsShipping();
        }
        foreach ($shipping as $ds) {
            $t = $ds->toArray();
            $shipping_data[] = $t;
        }


        $transporters = [];
        $transporter_id_cfg = \Setting::get(SETTING_TRANSPORTER_GROUP_ID);

        if ($transporter_id_cfg) {
            $transporterRole = \Roles::retrieveById($transporter_id_cfg);
            if ($transporterRole) {
                $transporters = $transporterRole->getMembers();
            }
        }

        $doc = $this->document();
        $doc->addJsVar('order_action_url', $this->createUrl('transporter/orders/action'));
        $doc->addJsVar('order', $data);
        $doc->addJsVar('transporters', array_map(function($transporter) {
            return $transporter->toArray();
        }, $transporters));
        $doc->addJsVar('shipping', $shipping_data);

        $doc->addJsVar('get_locations_url', $this->createUrl('transporter/location/get_all_locations'));
        $this->setView('Transporter/Order/detail');
        $this->view()->assign([
            'customer' => $customer,
            'order' => $this->order,
            'order_data' => $data,
            'shipping' => $shipping,
            'transporters' => $transporters
        ]);
        return $this->renderComponent();
    }

    public function executeAction()
    {
        $this->validAjaxRequest();
        $ajax = new \AjaxResponse();
        $ajax->type = \AjaxResponse::ERROR;

        if (!$this->order) {
            $ajax->error[] = t('Order not found!');
        }

        $action = '_'.$this->post('action');
        if (!method_exists($this, $action)) {
            $ajax->error[] = t('Not support action '.$this->post('acton'));
        }

        if (isset($ajax->error) && !empty($ajax->error)) {
            return $this->renderText($ajax->toString());
        }

        $ajax = $this->$action($ajax);
        return $this->renderText($ajax->toString());
    }

    private function _update(\AjaxResponse $ajax) {
        $data = $this->post('order', 'ARRAY', []);
        if (isset($data['total_fee'])) {
            $data['total_fee'] = floatval(str_replace(',', '.', str_replace('.', '', @$data['total_fee'])));
        }
    }

    private function _changeState(\AjaxResponse $ajax) {
        $state = $this->post('state');
        if ($state == \ShippingOrder::STATE_CLOSE && !$this->order->getTotalFee()) {
            $ajax->error[] = t('Order\' fee is not set!');
        }

        if (!isset($ajax->error) || empty($ajax->error)) {
            if($this->order->changeState($state)) {
                $ajax->type = \AjaxResponse::SUCCESS;
            }
        }

        return $ajax;
    }

    public function executeSaveShipping()
    {
        $this->validAjaxRequest();
        $ajax = new \AjaxResponse();
        $ajax->type = \AjaxResponse::ERROR;

        if (!$this->order) {
            $ajax->message = t('Something went wrong, could not found order');
            return $this->renderText($ajax->toString());
        }

        $sid = $this->post('sid');
        if ($sid) {
            $shipping = \DomesticsShipping::retrieveById($sid);
            if (!$shipping) {
                $ajax->message = t('Something went wrong, could not found shipping with id ' .$sid);
                return $this->renderText($ajax->toString());
            }
        } else {
            $shipping = new \DomesticsShipping();
        }
        $data = $this->post('sdata', 'ARRAY', []);
        $shipping->hydrate($data);
        $shipping->setOrderId($this->order->getId());
        $shipping->save();
    }

    //endregion DETAIL
}